Today's Topics

Revise Exception handling
More practice of custom exceptions : License expired  using Date Time Handling
String Handling 
Enter Generics 

Revise


1. Explain the Flow of execution
Eg. try {
int[] data={1,2,3,4};
sop(data[4]);
sop("end of try ...");
} catch (ArrayIndexOutOfBoundsException e)
{
  sop("in catch");
}
sop("cntd"); 

2. Explain Inheritance hierarchy of exc handling classes


3. What is the syntax of "throw" keyword ?
throw Throwable instance;


4. Who uses "throw" keyword ?
JVM uses "throw" keyword : for raising built in excs : eg NPExc, NFExc, ClassCastExc...
Prog uses "throw" keyword : for raising custom excs
5.
which of the following are legal ? 
try {....} catch (AE e ){..} : legal 
try {....} : illegal
try {....} catch (AE e ){..}  catch (NPE e) {..} catch(Exception e) {catch-all block} : legal
try {....} catch (AE | NPE| NFE e ){..}  catch(Exception e) {catch-all} : legal
try {....} catch(Exception e) {catch-all} catch (AE | NPE| NFE e ){..} : illgeal
try(Scanner sc=new Scanner(...)) {...} : legal
try {...} finally {...} : legal
try {...} finally {...} catch(Exception e){....} : illegal
try {...} catch(Exception e){....} finally {...} : legal 

6. checked vs un checked exceptions
How to identify ? Any exc class that extends from RunTimeExc : un checked exc
o.w : checked exc

who doesn't differentiate between checked vs un checked exceptions : JVM

who differentiates n how ? : javac
javac : forces handling of checked excs

Mention 2 ways of satisfying the javac (otherwise javac error !)
1. Actual handling : try-catch
OR
2. add throws 

7.Revise :  throw vs throws
throw :keyword used to  raise the  exception(JVM : system/built-in excs , Prog : custom exc), java stmt , appears in method def.
syntax : throw Throwable instance;

throws : meant for javac , appears in method declaration 
eg : public void show(....) throws IOException,InterruptedException
{
 ......
}
Meaning : show() MAY raise either IOException OR InterruptedException
To tell javac : show() is NOT handling the exc , so it's caller should handle !

When is adding "throws" keyword mandatory ? 
un handled(no try-catch) n checked excs


8.What is finally ? : block 
execs always!

9. Better alternative to clean up resources : 
try-with-resources
eg : try(Scanner sc=new Scanner(System.in);
FileReader fr=new FileReader(fileName)) 
{
 ......
} //JVM : fr.close() , sc.close()
catch-all


10. Can you open ANY Resource(i.e can you create ANY class instance) using try-with-resources block 's header?  NO
Can open only resources(classes) --that imple. java.lang.AutoCloseable
method : public void close() throws Exception


11. What are Steps in creating custom exception ?
11.1 Create a class that extends Exception
11.2 Add parameterized ctor : to init err mesg

11.3 In case of any err(eg validation failures)
throw new MyCustomException("err mesg....");


------------------------Revision Over ----------------------

1. String Handling (different classes)
1.1 Immutability of strings
1.2 == vs equals
1.3 literal vs non literal string
1.4 Go through : String class API (important methods only)
Names of the important method of the String class
concat,charAt,indexOf,lastIndexOf,toUpperCase,toLowerCase,format,split,matches,substring,startsWith,endWith

eg: indexOf
public int indexOf(char ch/String substring,int offset)
Meaning : rets index of 1st occurrence of specified char/sub string either from 0th index or specified offset.
rets -1 : if not found 

eg: lastIndexOf
public int lastIndexOf(char ch/String substring,int offset)
Meaning : rets index of last occurrence of specified char/sub string either from 0th index or specified offset.
rets -1 : if not found 

1.5 StringBuilder API


2. Date Time Handling 
Refer to readme : readme_strings_date_varargs.txt


Solve :
Object o=1234;//int --->Integer : auto boxing --> up casting : Object
sop(o.getClass()); //java.lang.Integer
o=false; //
o=123.456F;
o=new Date();//up casting
o="hello";//up casting
sop(o.getClass()); //java.lang.String




4. Generics
refer : regarding generics.txt

---------------------Pending -----------------------

5. Practical Application (mini case study)
Objective : Showroom Management system , which will keep track of vehicles added in the showroom.

Objective : Accept vehicle details : chasisNo(string) : Unique ID, color(enum) , basePrice(double) , manufactureDate(Date),company,isAvailable

Note : vehicle's base price will increase as per the chosen color

Add  validation rules

4.1 manufactureDate : must be in after 1st Jan 2021
4.2 Vehicle color must be valid

Create a Tester class

0. Prompt showroom capacity
Create suitable array.

Options
1. Add Vehicle to the showroom.
Accept data --validate all i/ps --in case of success -- add vehicle , to the showroom.
o.w : throw custom exception

2. Display all vehicle details

0. Exit

Later many more options will be added.


Regular expression patterns (some examples !)
1. Expects alphanumeric string for moderate strength passwords with at least 1 special character
"[a-z]+[A-Z]+[#@$%*\\-]+[0-9]+"
OR
(?=.*[0-9])(?=.*[a-z])(?=.*[#@$*%&]).{6,20}

2. Expects alphanumeric string for email  , having "@" n ending with either com|org|net
"[a-z]+[a-z0-9]+@[a-z]*\\.(com|org|net)"







